import { createAdapter } from "@socket.io/redis-adapter";
import { Server } from "socket.io";

/**
 * Kh·ªüi t·∫°o Socket.IO server s·ª≠ d·ª•ng Redis Adapter
 * @param {http.Server} httpServer - HTTP server ƒë·ªÉ attach socket.io v√†o
 * @param {RedisClientType} RedisClient - Redis client ƒë√£ ƒë∆∞·ª£c t·∫°o
 * @param {Function[]} socketMiddlewares - M·∫£ng c√°c middleware cho socket
 * @param {Function[]} socketHandlers - M·∫£ng c√°c h√†m x·ª≠ l√Ω socket, m·ªói h√†m nh·∫≠n socket l√†m tham s·ªë
 * @returns {Promise<Server>} - Tr·∫£ v·ªÅ instance io
 */
export async function initSocketIO(httpServer, RedisClient, socketMiddlewares = [], socketConnHandlers = [], socketDisconnHandlers = []) {
  const pubClient = RedisClient;
  const subClient = pubClient.duplicate();

  // Connect c·∫£ pub v√† sub n·∫øu ch∆∞a k·∫øt n·ªëi
  if (!pubClient.isOpen) await pubClient.connect();
  if (!subClient.isOpen) await subClient.connect();

  const io = new Server(httpServer, {
    cors: {
      origin: "*", // <-- Gfi n√™n ƒë·ªïi sang domain c·ª• th·ªÉ trong prod
      methods: ["GET", "POST"],
    },
  });

  // Redis adapter ƒë·ªÉ scale socket
  io.adapter(createAdapter(pubClient, subClient));

  for (const middleware of socketMiddlewares) {
    if (typeof middleware === "function") {
      io.use(async (socket, next) => {
        try {
          await middleware(socket, next);
        } catch (err) {
          console.error("‚ùå Middleware error:", err.message);
          next(err); // Ho·∫∑c emit l·ªói t√πy √Ω
        }
      });
    }
  }
  // S·ª± ki·ªán khi client k·∫øt n·ªëi
  io.on("connection", (socket) => {
    console.log(`üî• [SOCKET] Connected: ${socket.id}`);

    // G·ªçi t·ª´ng handler ƒë∆∞·ª£c truy·ªÅn v√†o
    for (const handler of socketConnHandlers) {
      if (typeof handler === "function") {
        handler(socket, io); // Truy·ªÅn th√™m io n·∫øu c·∫ßn emit to√†n c·ª•c
      }
    }

    socket.on("disconnect", async () => {
      
      console.log(`üí® [SOCKET] Disconnected: ${socket.id}`);
      for (const handler of socketDisconnHandlers) {
        if (typeof handler === "function") {
          try {
            await handler(socket, io); // Gi·∫£ s·ª≠ handler l√† async
          } catch (err) {
            console.error("‚ùå Disconnect handler error:", err);
          }
        }
      }

    });
  });

  // C√≥ th·ªÉ l∆∞u global ƒë·ªÉ g·ªçi emit t·ª´ service kh√°c
  global.IO = io;

  console.log("‚úÖ Socket.IO initialized with Redis adapter.");
}
